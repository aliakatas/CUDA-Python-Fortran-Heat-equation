// This file was generated by gpufort
#ifndef __MOD_HEAT_FORT2HIP_HIP_CPP__
#define __MOD_HEAT_FORT2HIP_HIP_CPP__
#include "hip/hip_runtime.h"
#include "hip/hip_complex.h"
#include "gpufort.h"


// BEGIN heat_eqn_35_02ced1
/*
   HIP C++ implementation of the function/loop body of:

       !$cuf kernel do(2) <<<grid,tBlock>>>
       do j=1,n
        do k=1,n
         if(j .ne. 1 .and. k .ne. 1 .and. j .ne. n .and. k .ne. n) then
          T_d(j,k) = T_old_d(j,k) + r*(T_old_d(j+1,k)+T_old_d(j,k+1)+T_old_d(j-1,k)+T_old_d(j,k-1)-4*T_old_d(j,k))
         end if
        end do
       end do 

*/

__global__ void  heat_eqn_35_02ced1(
    int n,
    double * __restrict__ t_d,
    const int t_d_n1,
    const int t_d_n2,
    const int t_d_lb1,
    const int t_d_lb2,
    double * __restrict__ t_old_d,
    const int t_old_d_n1,
    const int t_old_d_n2,
    const int t_old_d_lb1,
    const int t_old_d_lb2,
    float r) {
  #undef _idx_t_d
  #define _idx_t_d(a,b) ((a-(t_d_lb1))+t_d_n1*(b-(t_d_lb2)))
  #undef _idx_t_old_d
  #define _idx_t_old_d(a,b) ((a-(t_old_d_lb1))+t_old_d_n1*(b-(t_old_d_lb2)))
    int k = 1 + (1)*(__gidx1 % (1 + ((n) - (1))));
  int j = 1 + (1)*(__gidx1/((1 + ((n) - (1)))) % (1 + ((n) - (1))));
  if (loop_cond(k,n,1)&&loop_cond(j,n,1)) {
      if ((j!=1&k!=1&j!=n&k!=n)) {
        t_d[_idx_t_d(j,k)]=(t_old_d[_idx_t_old_d(j,k)]+r*(t_old_d[_idx_t_old_d((j+1),k)]+t_old_d[_idx_t_old_d(j,(k+1))]+t_old_d[_idx_t_old_d((j-1),k)]+t_old_d[_idx_t_old_d(j,(k-1))]-4*t_old_d[_idx_t_old_d(j,k)]));
      }
  }
}
extern "C" void launch_heat_eqn_35_02ced1(
    dim3* grid,
    dim3* block,  
    const int sharedmem, 
    hipStream_t stream,
    int n,
    double * __restrict__ t_d,
    const int t_d_n1,
    const int t_d_n2,
    const int t_d_lb1,
    const int t_d_lb2,
    double * __restrict__ t_old_d,
    const int t_old_d_n1,
    const int t_old_d_n2,
    const int t_old_d_lb1,
    const int t_old_d_lb2,
    float r) {

  // launch kernel
  hipLaunchKernelGGL((heat_eqn_35_02ced1), *grid, *block, sharedmem, stream, n,t_d,t_d_n1,t_d_n2,t_d_lb1,t_d_lb2,t_old_d,t_old_d_n1,t_old_d_n2,t_old_d_lb1,t_old_d_lb2,r);

}
extern "C" void launch_heat_eqn_35_02ced1_auto(
    const int sharedmem, 
    hipStream_t stream,
    int n,
    double * __restrict__ t_d,
    const int t_d_n1,
    const int t_d_n2,
    const int t_d_lb1,
    const int t_d_lb2,
    double * __restrict__ t_old_d,
    const int t_old_d_n1,
    const int t_old_d_n2,
    const int t_old_d_lb1,
    const int t_old_d_lb2,
    float r) {
  const int heat_eqn_35_02ced1_blockX = 128;
  dim3 block(heat_eqn_35_02ced1_blockX);
  const int heat_eqn_35_02ced1_NX = (1 + ((n) - (1)))*(1 + ((n) - (1)));
  const int heat_eqn_35_02ced1_gridX = divideAndRoundUp( heat_eqn_35_02ced1_NX, heat_eqn_35_02ced1_blockX );
  dim3 grid(heat_eqn_35_02ced1_gridX);
   

  // launch kernel
  hipLaunchKernelGGL((heat_eqn_35_02ced1), grid, block, sharedmem, stream, n,t_d,t_d_n1,t_d_n2,t_d_lb1,t_d_lb2,t_old_d,t_old_d_n1,t_old_d_n2,t_old_d_lb1,t_old_d_lb2,r);

}

// END heat_eqn_35_02ced1
#endif // __MOD_HEAT_FORT2HIP_HIP_CPP__ 