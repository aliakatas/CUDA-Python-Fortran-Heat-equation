! This file was generated by gpufort
module mod_swap_fort2hip
  use iso_c_binding
  


  interface
    subroutine launch_swap_153_c8dc21(grid,&
        block,&
        sharedmem,&
        stream,&
        td_1s,&
        td_1s_n1,&
        td_1s_n2,&
        td_1s_lb1,&
        td_1s_lb2,&
        t_d,&
        t_d_n1,&
        t_d_n2,&
        t_d_lb1,&
        t_d_lb2,&
        td_2s,&
        td_2s_n1,&
        td_2s_n2,&
        td_2s_lb1,&
        td_2s_lb2,&
        nx,&
        ng,&
        ny) bind(c, name="launch_swap_153_c8dc21")
      use iso_c_binding
      use hipfort
      use hipfort_check
      implicit none
      type(dim3),intent(in) :: grid
      type(dim3),intent(in) :: block
      integer(c_int),value,intent(in) :: sharedmem
      type(c_ptr),value,intent(in) :: stream
      type(c_ptr),value :: td_1s
      integer(c_int),value,intent(in) :: td_1s_n1
      integer(c_int),value,intent(in) :: td_1s_n2
      integer(c_int),value,intent(in) :: td_1s_lb1
      integer(c_int),value,intent(in) :: td_1s_lb2
      type(c_ptr),value :: t_d
      integer(c_int),value,intent(in) :: t_d_n1
      integer(c_int),value,intent(in) :: t_d_n2
      integer(c_int),value,intent(in) :: t_d_lb1
      integer(c_int),value,intent(in) :: t_d_lb2
      type(c_ptr),value :: td_2s
      integer(c_int),value,intent(in) :: td_2s_n1
      integer(c_int),value,intent(in) :: td_2s_n2
      integer(c_int),value,intent(in) :: td_2s_lb1
      integer(c_int),value,intent(in) :: td_2s_lb2
      integer,value :: nx
      integer,value :: ng
      integer,value :: ny
    end subroutine
    subroutine launch_swap_153_c8dc21_auto(sharedmem,&
        stream,&
        td_1s,&
        td_1s_n1,&
        td_1s_n2,&
        td_1s_lb1,&
        td_1s_lb2,&
        t_d,&
        t_d_n1,&
        t_d_n2,&
        t_d_lb1,&
        t_d_lb2,&
        td_2s,&
        td_2s_n1,&
        td_2s_n2,&
        td_2s_lb1,&
        td_2s_lb2,&
        nx,&
        ng,&
        ny) bind(c, name="launch_swap_153_c8dc21_auto")
      use iso_c_binding
      use hipfort
      use hipfort_check
      implicit none
      integer(c_int),value,intent(in) :: sharedmem
      type(c_ptr),value,intent(in) :: stream
      type(c_ptr),value :: td_1s
      integer(c_int),value,intent(in) :: td_1s_n1
      integer(c_int),value,intent(in) :: td_1s_n2
      integer(c_int),value,intent(in) :: td_1s_lb1
      integer(c_int),value,intent(in) :: td_1s_lb2
      type(c_ptr),value :: t_d
      integer(c_int),value,intent(in) :: t_d_n1
      integer(c_int),value,intent(in) :: t_d_n2
      integer(c_int),value,intent(in) :: t_d_lb1
      integer(c_int),value,intent(in) :: t_d_lb2
      type(c_ptr),value :: td_2s
      integer(c_int),value,intent(in) :: td_2s_n1
      integer(c_int),value,intent(in) :: td_2s_n2
      integer(c_int),value,intent(in) :: td_2s_lb1
      integer(c_int),value,intent(in) :: td_2s_lb2
      integer,value :: nx
      integer,value :: ng
      integer,value :: ny
    end subroutine
    subroutine launch_swap_153_c8dc21_cpu(sharedmem,&
        stream,&
        td_1s,&
        td_1s_n1,&
        td_1s_n2,&
        td_1s_lb1,&
        td_1s_lb2,&
        t_d,&
        t_d_n1,&
        t_d_n2,&
        t_d_lb1,&
        t_d_lb2,&
        td_2s,&
        td_2s_n1,&
        td_2s_n2,&
        td_2s_lb1,&
        td_2s_lb2,&
        nx,&
        ng,&
        ny) bind(c, name="launch_swap_153_c8dc21_cpu")
      use iso_c_binding
      use hipfort
      use hipfort_check
      implicit none
      integer(c_int),value,intent(in) :: sharedmem
      type(c_ptr),value,intent(in) :: stream
      type(c_ptr),value :: td_1s
      integer(c_int),value,intent(in) :: td_1s_n1
      integer(c_int),value,intent(in) :: td_1s_n2
      integer(c_int),value,intent(in) :: td_1s_lb1
      integer(c_int),value,intent(in) :: td_1s_lb2
      type(c_ptr),value :: t_d
      integer(c_int),value,intent(in) :: t_d_n1
      integer(c_int),value,intent(in) :: t_d_n2
      integer(c_int),value,intent(in) :: t_d_lb1
      integer(c_int),value,intent(in) :: t_d_lb2
      type(c_ptr),value :: td_2s
      integer(c_int),value,intent(in) :: td_2s_n1
      integer(c_int),value,intent(in) :: td_2s_n2
      integer(c_int),value,intent(in) :: td_2s_lb1
      integer(c_int),value,intent(in) :: td_2s_lb2
      integer,value :: nx
      integer,value :: ng
      integer,value :: ny
    end subroutine
    subroutine launch_swap_170_d45ddb(grid,&
        block,&
        sharedmem,&
        stream,&
        t_d,&
        t_d_n1,&
        t_d_n2,&
        t_d_lb1,&
        t_d_lb2,&
        ng,&
        td_1r,&
        td_1r_n1,&
        td_1r_n2,&
        td_1r_lb1,&
        td_1r_lb2,&
        ny) bind(c, name="launch_swap_170_d45ddb")
      use iso_c_binding
      use hipfort
      use hipfort_check
      implicit none
      type(dim3),intent(in) :: grid
      type(dim3),intent(in) :: block
      integer(c_int),value,intent(in) :: sharedmem
      type(c_ptr),value,intent(in) :: stream
      type(c_ptr),value :: t_d
      integer(c_int),value,intent(in) :: t_d_n1
      integer(c_int),value,intent(in) :: t_d_n2
      integer(c_int),value,intent(in) :: t_d_lb1
      integer(c_int),value,intent(in) :: t_d_lb2
      integer,value :: ng
      type(c_ptr),value :: td_1r
      integer(c_int),value,intent(in) :: td_1r_n1
      integer(c_int),value,intent(in) :: td_1r_n2
      integer(c_int),value,intent(in) :: td_1r_lb1
      integer(c_int),value,intent(in) :: td_1r_lb2
      integer,value :: ny
    end subroutine
    subroutine launch_swap_170_d45ddb_auto(sharedmem,&
        stream,&
        t_d,&
        t_d_n1,&
        t_d_n2,&
        t_d_lb1,&
        t_d_lb2,&
        ng,&
        td_1r,&
        td_1r_n1,&
        td_1r_n2,&
        td_1r_lb1,&
        td_1r_lb2,&
        ny) bind(c, name="launch_swap_170_d45ddb_auto")
      use iso_c_binding
      use hipfort
      use hipfort_check
      implicit none
      integer(c_int),value,intent(in) :: sharedmem
      type(c_ptr),value,intent(in) :: stream
      type(c_ptr),value :: t_d
      integer(c_int),value,intent(in) :: t_d_n1
      integer(c_int),value,intent(in) :: t_d_n2
      integer(c_int),value,intent(in) :: t_d_lb1
      integer(c_int),value,intent(in) :: t_d_lb2
      integer,value :: ng
      type(c_ptr),value :: td_1r
      integer(c_int),value,intent(in) :: td_1r_n1
      integer(c_int),value,intent(in) :: td_1r_n2
      integer(c_int),value,intent(in) :: td_1r_lb1
      integer(c_int),value,intent(in) :: td_1r_lb2
      integer,value :: ny
    end subroutine
    subroutine launch_swap_170_d45ddb_cpu(sharedmem,&
        stream,&
        t_d,&
        t_d_n1,&
        t_d_n2,&
        t_d_lb1,&
        t_d_lb2,&
        ng,&
        td_1r,&
        td_1r_n1,&
        td_1r_n2,&
        td_1r_lb1,&
        td_1r_lb2,&
        ny) bind(c, name="launch_swap_170_d45ddb_cpu")
      use iso_c_binding
      use hipfort
      use hipfort_check
      implicit none
      integer(c_int),value,intent(in) :: sharedmem
      type(c_ptr),value,intent(in) :: stream
      type(c_ptr),value :: t_d
      integer(c_int),value,intent(in) :: t_d_n1
      integer(c_int),value,intent(in) :: t_d_n2
      integer(c_int),value,intent(in) :: t_d_lb1
      integer(c_int),value,intent(in) :: t_d_lb2
      integer,value :: ng
      type(c_ptr),value :: td_1r
      integer(c_int),value,intent(in) :: td_1r_n1
      integer(c_int),value,intent(in) :: td_1r_n2
      integer(c_int),value,intent(in) :: td_1r_lb1
      integer(c_int),value,intent(in) :: td_1r_lb2
      integer,value :: ny
    end subroutine
    subroutine launch_swap_179_b0e0a8(grid,&
        block,&
        sharedmem,&
        stream,&
        t_d,&
        t_d_n1,&
        t_d_n2,&
        t_d_lb1,&
        t_d_lb2,&
        nx,&
        td_2r,&
        td_2r_n1,&
        td_2r_n2,&
        td_2r_lb1,&
        td_2r_lb2,&
        ng,&
        ny) bind(c, name="launch_swap_179_b0e0a8")
      use iso_c_binding
      use hipfort
      use hipfort_check
      implicit none
      type(dim3),intent(in) :: grid
      type(dim3),intent(in) :: block
      integer(c_int),value,intent(in) :: sharedmem
      type(c_ptr),value,intent(in) :: stream
      type(c_ptr),value :: t_d
      integer(c_int),value,intent(in) :: t_d_n1
      integer(c_int),value,intent(in) :: t_d_n2
      integer(c_int),value,intent(in) :: t_d_lb1
      integer(c_int),value,intent(in) :: t_d_lb2
      integer,value :: nx
      type(c_ptr),value :: td_2r
      integer(c_int),value,intent(in) :: td_2r_n1
      integer(c_int),value,intent(in) :: td_2r_n2
      integer(c_int),value,intent(in) :: td_2r_lb1
      integer(c_int),value,intent(in) :: td_2r_lb2
      integer,value :: ng
      integer,value :: ny
    end subroutine
    subroutine launch_swap_179_b0e0a8_auto(sharedmem,&
        stream,&
        t_d,&
        t_d_n1,&
        t_d_n2,&
        t_d_lb1,&
        t_d_lb2,&
        nx,&
        td_2r,&
        td_2r_n1,&
        td_2r_n2,&
        td_2r_lb1,&
        td_2r_lb2,&
        ng,&
        ny) bind(c, name="launch_swap_179_b0e0a8_auto")
      use iso_c_binding
      use hipfort
      use hipfort_check
      implicit none
      integer(c_int),value,intent(in) :: sharedmem
      type(c_ptr),value,intent(in) :: stream
      type(c_ptr),value :: t_d
      integer(c_int),value,intent(in) :: t_d_n1
      integer(c_int),value,intent(in) :: t_d_n2
      integer(c_int),value,intent(in) :: t_d_lb1
      integer(c_int),value,intent(in) :: t_d_lb2
      integer,value :: nx
      type(c_ptr),value :: td_2r
      integer(c_int),value,intent(in) :: td_2r_n1
      integer(c_int),value,intent(in) :: td_2r_n2
      integer(c_int),value,intent(in) :: td_2r_lb1
      integer(c_int),value,intent(in) :: td_2r_lb2
      integer,value :: ng
      integer,value :: ny
    end subroutine
    subroutine launch_swap_179_b0e0a8_cpu(sharedmem,&
        stream,&
        t_d,&
        t_d_n1,&
        t_d_n2,&
        t_d_lb1,&
        t_d_lb2,&
        nx,&
        td_2r,&
        td_2r_n1,&
        td_2r_n2,&
        td_2r_lb1,&
        td_2r_lb2,&
        ng,&
        ny) bind(c, name="launch_swap_179_b0e0a8_cpu")
      use iso_c_binding
      use hipfort
      use hipfort_check
      implicit none
      integer(c_int),value,intent(in) :: sharedmem
      type(c_ptr),value,intent(in) :: stream
      type(c_ptr),value :: t_d
      integer(c_int),value,intent(in) :: t_d_n1
      integer(c_int),value,intent(in) :: t_d_n2
      integer(c_int),value,intent(in) :: t_d_lb1
      integer(c_int),value,intent(in) :: t_d_lb2
      integer,value :: nx
      type(c_ptr),value :: td_2r
      integer(c_int),value,intent(in) :: td_2r_n1
      integer(c_int),value,intent(in) :: td_2r_n2
      integer(c_int),value,intent(in) :: td_2r_lb1
      integer(c_int),value,intent(in) :: td_2r_lb2
      integer,value :: ng
      integer,value :: ny
    end subroutine
  end interface
  contains
    subroutine launch_swap_153_c8dc21_cpu1(sharedmem,&
        stream,&
        d_td_1s,&
        td_1s_n1,&
        td_1s_n2,&
        td_1s_lb1,&
        td_1s_lb2,&
        d_t_d,&
        t_d_n1,&
        t_d_n2,&
        t_d_lb1,&
        t_d_lb2,&
        d_td_2s,&
        td_2s_n1,&
        td_2s_n2,&
        td_2s_lb1,&
        td_2s_lb2,&
        nx,&
        ng,&
        ny) bind(c, name="launch_swap_153_c8dc21_cpu1")
      use iso_c_binding
      use hipfort
      use hipfort_check
      implicit none
      integer(c_int),value,intent(in) :: sharedmem
      type(c_ptr),value,intent(in) :: stream
      type(c_ptr),value :: d_td_1s
      integer(c_int),value,intent(in) :: td_1s_n1
      integer(c_int),value,intent(in) :: td_1s_n2
      integer(c_int),value,intent(in) :: td_1s_lb1
      integer(c_int),value,intent(in) :: td_1s_lb2
      type(c_ptr),value :: d_t_d
      integer(c_int),value,intent(in) :: t_d_n1
      integer(c_int),value,intent(in) :: t_d_n2
      integer(c_int),value,intent(in) :: t_d_lb1
      integer(c_int),value,intent(in) :: t_d_lb2
      type(c_ptr),value :: d_td_2s
      integer(c_int),value,intent(in) :: td_2s_n1
      integer(c_int),value,intent(in) :: td_2s_n2
      integer(c_int),value,intent(in) :: td_2s_lb1
      integer(c_int),value,intent(in) :: td_2s_lb2
      integer,value :: nx
      integer,value :: ng
      integer,value :: ny
      real,allocatable,dimension(:,:),target :: td_1s
      integer :: i
      integer :: j
      real,allocatable,dimension(:,:),target :: t_d
      real,allocatable,dimension(:,:),target :: td_2s
      allocate(td_1s(td_1s_lb1:td_1s_lb1+td_1s_n1-1,td_1s_lb2:td_1s_lb2+td_1s_n2-1))
      CALL hipCheck(hipMemcpy(c_loc(td_1s),d_td_1s,4_8*SIZE(td_1s),hipMemcpyDeviceToHost))
      allocate(t_d(t_d_lb1:t_d_lb1+t_d_n1-1,t_d_lb2:t_d_lb2+t_d_n2-1))
      CALL hipCheck(hipMemcpy(c_loc(t_d),d_t_d,4_8*SIZE(t_d),hipMemcpyDeviceToHost))
      allocate(td_2s(td_2s_lb1:td_2s_lb1+td_2s_n1-1,td_2s_lb2:td_2s_lb2+td_2s_n2-1))
      CALL hipCheck(hipMemcpy(c_loc(td_2s),d_td_2s,4_8*SIZE(td_2s),hipMemcpyDeviceToHost))
         !$cuf kernel do(2) <<<grid,tBlock>>>
         do j=1,ny
          do i=1,ng
            td_1s(i,j) = T_d(i,j)
            td_2s(i,j) = T_d(nx-ng+i,j)
          end do
         end do
      CALL hipCheck(hipMemcpy(d_td_1s,c_loc(td_1s),4_8*SIZE(td_1s),hipMemcpyHostToDevice))
      deallocate(td_1s)
      CALL hipCheck(hipMemcpy(d_t_d,c_loc(t_d),4_8*SIZE(t_d),hipMemcpyHostToDevice))
      deallocate(t_d)
      CALL hipCheck(hipMemcpy(d_td_2s,c_loc(td_2s),4_8*SIZE(td_2s),hipMemcpyHostToDevice))
      deallocate(td_2s)

    end subroutine
    subroutine launch_swap_170_d45ddb_cpu1(sharedmem,&
        stream,&
        d_t_d,&
        t_d_n1,&
        t_d_n2,&
        t_d_lb1,&
        t_d_lb2,&
        ng,&
        d_td_1r,&
        td_1r_n1,&
        td_1r_n2,&
        td_1r_lb1,&
        td_1r_lb2,&
        ny) bind(c, name="launch_swap_170_d45ddb_cpu1")
      use iso_c_binding
      use hipfort
      use hipfort_check
      implicit none
      integer(c_int),value,intent(in) :: sharedmem
      type(c_ptr),value,intent(in) :: stream
      type(c_ptr),value :: d_t_d
      integer(c_int),value,intent(in) :: t_d_n1
      integer(c_int),value,intent(in) :: t_d_n2
      integer(c_int),value,intent(in) :: t_d_lb1
      integer(c_int),value,intent(in) :: t_d_lb2
      integer,value :: ng
      type(c_ptr),value :: d_td_1r
      integer(c_int),value,intent(in) :: td_1r_n1
      integer(c_int),value,intent(in) :: td_1r_n2
      integer(c_int),value,intent(in) :: td_1r_lb1
      integer(c_int),value,intent(in) :: td_1r_lb2
      integer,value :: ny
      real,allocatable,dimension(:,:),target :: t_d
      integer :: i
      integer :: j
      real,allocatable,dimension(:,:),target :: td_1r
      allocate(t_d(t_d_lb1:t_d_lb1+t_d_n1-1,t_d_lb2:t_d_lb2+t_d_n2-1))
      CALL hipCheck(hipMemcpy(c_loc(t_d),d_t_d,4_8*SIZE(t_d),hipMemcpyDeviceToHost))
      allocate(td_1r(td_1r_lb1:td_1r_lb1+td_1r_n1-1,td_1r_lb2:td_1r_lb2+td_1r_n2-1))
      CALL hipCheck(hipMemcpy(c_loc(td_1r),d_td_1r,4_8*SIZE(td_1r),hipMemcpyDeviceToHost))
          !$cuf kernel do(2) <<<grid,tBlock>>>
          do j=1,ny
           do i=1,ng
            T_d(i-ng,j) = td_1r(i,j)
           end do
          end do
      CALL hipCheck(hipMemcpy(d_t_d,c_loc(t_d),4_8*SIZE(t_d),hipMemcpyHostToDevice))
      deallocate(t_d)
      CALL hipCheck(hipMemcpy(d_td_1r,c_loc(td_1r),4_8*SIZE(td_1r),hipMemcpyHostToDevice))
      deallocate(td_1r)

    end subroutine
    subroutine launch_swap_179_b0e0a8_cpu1(sharedmem,&
        stream,&
        d_t_d,&
        t_d_n1,&
        t_d_n2,&
        t_d_lb1,&
        t_d_lb2,&
        nx,&
        d_td_2r,&
        td_2r_n1,&
        td_2r_n2,&
        td_2r_lb1,&
        td_2r_lb2,&
        ng,&
        ny) bind(c, name="launch_swap_179_b0e0a8_cpu1")
      use iso_c_binding
      use hipfort
      use hipfort_check
      implicit none
      integer(c_int),value,intent(in) :: sharedmem
      type(c_ptr),value,intent(in) :: stream
      type(c_ptr),value :: d_t_d
      integer(c_int),value,intent(in) :: t_d_n1
      integer(c_int),value,intent(in) :: t_d_n2
      integer(c_int),value,intent(in) :: t_d_lb1
      integer(c_int),value,intent(in) :: t_d_lb2
      integer,value :: nx
      type(c_ptr),value :: d_td_2r
      integer(c_int),value,intent(in) :: td_2r_n1
      integer(c_int),value,intent(in) :: td_2r_n2
      integer(c_int),value,intent(in) :: td_2r_lb1
      integer(c_int),value,intent(in) :: td_2r_lb2
      integer,value :: ng
      integer,value :: ny
      real,allocatable,dimension(:,:),target :: t_d
      integer :: i
      integer :: j
      real,allocatable,dimension(:,:),target :: td_2r
      allocate(t_d(t_d_lb1:t_d_lb1+t_d_n1-1,t_d_lb2:t_d_lb2+t_d_n2-1))
      CALL hipCheck(hipMemcpy(c_loc(t_d),d_t_d,4_8*SIZE(t_d),hipMemcpyDeviceToHost))
      allocate(td_2r(td_2r_lb1:td_2r_lb1+td_2r_n1-1,td_2r_lb2:td_2r_lb2+td_2r_n2-1))
      CALL hipCheck(hipMemcpy(c_loc(td_2r),d_td_2r,4_8*SIZE(td_2r),hipMemcpyDeviceToHost))
          !$cuf kernel do(2) <<<grid,tBlock>>>
          do j=1,ny
           do i=1,ng
            T_d(nx+i,j) = td_2r(i,j)
           end do
          end do
      CALL hipCheck(hipMemcpy(d_t_d,c_loc(t_d),4_8*SIZE(t_d),hipMemcpyHostToDevice))
      deallocate(t_d)
      CALL hipCheck(hipMemcpy(d_td_2r,c_loc(td_2r),4_8*SIZE(td_2r),hipMemcpyHostToDevice))
      deallocate(td_2r)

    end subroutine
end module mod_swap_fort2hip
! This file was generated by gpufort
module mod_heat_fort2hip
  use iso_c_binding
  


  interface
    subroutine launch_heat_eqn_207_25f1bf(grid,&
        block,&
        sharedmem,&
        stream,&
        t_d,&
        t_d_n1,&
        t_d_n2,&
        t_d_lb1,&
        t_d_lb2,&
        t_old_d,&
        t_old_d_n1,&
        t_old_d_n2,&
        t_old_d_lb1,&
        t_old_d_lb2,&
        r,&
        ny,&
        nx) bind(c, name="launch_heat_eqn_207_25f1bf")
      use iso_c_binding
      use hipfort
      use hipfort_check
      implicit none
      type(dim3),intent(in) :: grid
      type(dim3),intent(in) :: block
      integer(c_int),value,intent(in) :: sharedmem
      type(c_ptr),value,intent(in) :: stream
      type(c_ptr),value :: t_d
      integer(c_int),value,intent(in) :: t_d_n1
      integer(c_int),value,intent(in) :: t_d_n2
      integer(c_int),value,intent(in) :: t_d_lb1
      integer(c_int),value,intent(in) :: t_d_lb2
      type(c_ptr),value :: t_old_d
      integer(c_int),value,intent(in) :: t_old_d_n1
      integer(c_int),value,intent(in) :: t_old_d_n2
      integer(c_int),value,intent(in) :: t_old_d_lb1
      integer(c_int),value,intent(in) :: t_old_d_lb2
      real,value :: r
      integer,value :: ny
      integer,value :: nx
    end subroutine
    subroutine launch_heat_eqn_207_25f1bf_auto(sharedmem,&
        stream,&
        t_d,&
        t_d_n1,&
        t_d_n2,&
        t_d_lb1,&
        t_d_lb2,&
        t_old_d,&
        t_old_d_n1,&
        t_old_d_n2,&
        t_old_d_lb1,&
        t_old_d_lb2,&
        r,&
        ny,&
        nx) bind(c, name="launch_heat_eqn_207_25f1bf_auto")
      use iso_c_binding
      use hipfort
      use hipfort_check
      implicit none
      integer(c_int),value,intent(in) :: sharedmem
      type(c_ptr),value,intent(in) :: stream
      type(c_ptr),value :: t_d
      integer(c_int),value,intent(in) :: t_d_n1
      integer(c_int),value,intent(in) :: t_d_n2
      integer(c_int),value,intent(in) :: t_d_lb1
      integer(c_int),value,intent(in) :: t_d_lb2
      type(c_ptr),value :: t_old_d
      integer(c_int),value,intent(in) :: t_old_d_n1
      integer(c_int),value,intent(in) :: t_old_d_n2
      integer(c_int),value,intent(in) :: t_old_d_lb1
      integer(c_int),value,intent(in) :: t_old_d_lb2
      real,value :: r
      integer,value :: ny
      integer,value :: nx
    end subroutine
    subroutine launch_heat_eqn_207_25f1bf_cpu(sharedmem,&
        stream,&
        t_d,&
        t_d_n1,&
        t_d_n2,&
        t_d_lb1,&
        t_d_lb2,&
        t_old_d,&
        t_old_d_n1,&
        t_old_d_n2,&
        t_old_d_lb1,&
        t_old_d_lb2,&
        r,&
        ny,&
        nx) bind(c, name="launch_heat_eqn_207_25f1bf_cpu")
      use iso_c_binding
      use hipfort
      use hipfort_check
      implicit none
      integer(c_int),value,intent(in) :: sharedmem
      type(c_ptr),value,intent(in) :: stream
      type(c_ptr),value :: t_d
      integer(c_int),value,intent(in) :: t_d_n1
      integer(c_int),value,intent(in) :: t_d_n2
      integer(c_int),value,intent(in) :: t_d_lb1
      integer(c_int),value,intent(in) :: t_d_lb2
      type(c_ptr),value :: t_old_d
      integer(c_int),value,intent(in) :: t_old_d_n1
      integer(c_int),value,intent(in) :: t_old_d_n2
      integer(c_int),value,intent(in) :: t_old_d_lb1
      integer(c_int),value,intent(in) :: t_old_d_lb2
      real,value :: r
      integer,value :: ny
      integer,value :: nx
    end subroutine
  end interface
  contains
    subroutine launch_heat_eqn_207_25f1bf_cpu1(sharedmem,&
        stream,&
        d_t_d,&
        t_d_n1,&
        t_d_n2,&
        t_d_lb1,&
        t_d_lb2,&
        d_t_old_d,&
        t_old_d_n1,&
        t_old_d_n2,&
        t_old_d_lb1,&
        t_old_d_lb2,&
        r,&
        ny,&
        nx) bind(c, name="launch_heat_eqn_207_25f1bf_cpu1")
      use iso_c_binding
      use hipfort
      use hipfort_check
      implicit none
      integer(c_int),value,intent(in) :: sharedmem
      type(c_ptr),value,intent(in) :: stream
      type(c_ptr),value :: d_t_d
      integer(c_int),value,intent(in) :: t_d_n1
      integer(c_int),value,intent(in) :: t_d_n2
      integer(c_int),value,intent(in) :: t_d_lb1
      integer(c_int),value,intent(in) :: t_d_lb2
      type(c_ptr),value :: d_t_old_d
      integer(c_int),value,intent(in) :: t_old_d_n1
      integer(c_int),value,intent(in) :: t_old_d_n2
      integer(c_int),value,intent(in) :: t_old_d_lb1
      integer(c_int),value,intent(in) :: t_old_d_lb2
      real,value :: r
      integer,value :: ny
      integer,value :: nx
      real,allocatable,dimension(:,:),target :: t_d
      integer :: j
      integer :: k
      real,allocatable,dimension(:,:),target :: t_old_d
      allocate(t_d(t_d_lb1:t_d_lb1+t_d_n1-1,t_d_lb2:t_d_lb2+t_d_n2-1))
      CALL hipCheck(hipMemcpy(c_loc(t_d),d_t_d,4_8*SIZE(t_d),hipMemcpyDeviceToHost))
      allocate(t_old_d(t_old_d_lb1:t_old_d_lb1+t_old_d_n1-1,t_old_d_lb2:t_old_d_lb2+t_old_d_n2-1))
      CALL hipCheck(hipMemcpy(c_loc(t_old_d),d_t_old_d,4_8*SIZE(t_old_d),hipMemcpyDeviceToHost))
          !$cuf kernel do(2) <<<grid,tBlock>>>
          do j=1,nx
           do k=1,ny
             T_d(j,k) = T_old_d(j,k) + r*(T_old_d(j+1,k)+T_old_d(j,k+1)+T_old_d(j-1,k)+T_old_d(j,k-1)-4*T_old_d(j,k))
           end do
          end do
      CALL hipCheck(hipMemcpy(d_t_d,c_loc(t_d),4_8*SIZE(t_d),hipMemcpyHostToDevice))
      deallocate(t_d)
      CALL hipCheck(hipMemcpy(d_t_old_d,c_loc(t_old_d),4_8*SIZE(t_old_d),hipMemcpyHostToDevice))
      deallocate(t_old_d)

    end subroutine
end module mod_heat_fort2hip